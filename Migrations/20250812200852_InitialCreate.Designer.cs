// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Vanilla.Data;

#nullable disable

namespace Vanilla.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250812200852_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Vanilla.Models.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f0c5f46-2a62-4f2a-bc0f-91b0a9f7e5a1"),
                            Email = "admin@example.com",
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Vanilla.Models.Reservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int?>("PartySize")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("TableId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("TableId", "StartAt")
                        .IsUnique();

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Vanilla.Models.TableEntity", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "Masa 1"
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "Masa 2"
                        },
                        new
                        {
                            Id = (short)3,
                            Name = "Masa 3"
                        },
                        new
                        {
                            Id = (short)4,
                            Name = "Masa 4"
                        },
                        new
                        {
                            Id = (short)5,
                            Name = "Masa 5"
                        },
                        new
                        {
                            Id = (short)6,
                            Name = "Masa 6"
                        },
                        new
                        {
                            Id = (short)7,
                            Name = "Masa 7"
                        },
                        new
                        {
                            Id = (short)8,
                            Name = "Masa 8"
                        });
                });

            modelBuilder.Entity("Vanilla.Models.Reservation", b =>
                {
                    b.HasOne("Vanilla.Models.TableEntity", "Table")
                        .WithMany("Reservations")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Vanilla.Models.TableEntity", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
